[２種類のwhile]

  [while基礎構文]
    while (temp > 25) {
      temp--;
      System.out.println("温度を１度下げました");
    }
    「while文は先に条件式を評価する」

  [do-while構文]
    do {
      temp--;
      System.out.println("温度を１度下げました");
    } while (temp > 25);
    「実行してから条件式を評価する」

  [どんな影響がある？]
  ループの最低回数がポイント！

  [while文の場合]
  ブロックを実行する前に条件判定を行う(前置判定)
  初めからfalseだった場合、１度もブロックが実行されない

  [do-while 文の場合]
  ブロックを実行後に条件判定を行う(後置判定)
  裁定１度はブロックを実行する。



  [for文による繰り返し]
  ループの回数を指定できる。

  [例]
  public class Main {
    public static void main(string[] args) {
      for (int i = 0; i < 10; i++) {
        System.out.println("こんにちは");
      }
    }
  }

  [for文の各部の解説]
  1.初期化処理...int i = 0;
    繰り返しが始まるにあたり、最初に１度だけ実行される文。通常、何周目のループかを記録する変数を定義する。

  2.繰り返し条件...i < 10;
    ブロック内容を実行する前に評価され、ループを継続するか否かを判定する。trueの間は{}の中身が実行される。

  3.繰り返し時処理...i++
    for文を最後まで処理し、}まで到達した直後、自動的に実行される文。



  [ループ変数]
  1.ループ変数の名前は自由
    iに限らず自由に決めて良い。すでに宣言されている場合は諦めて。
  
  2.ブロック内で利用可能
    ブロック内での計算、表示に使える
    [例]
    public class Main{
      public static void main(string[] args) {
        for (int i = 0; i < 3; i++) {
          System.out.println("現在" + (i + 1) + "週目→");
        }
      }
    }
    [結果]
    現在1週目→現在２週目→現在３週目→

  3.ブロック外では利用不可
    ループ分を抜けるとループ変数は消えてしまう。



  [複雑なfor文]
  for(int i = 1; i < 10; i++)...ループ変数を1からスタートさせる

  for(int i = 0; i < 10; i += 2)...ループ変数を２ずつ足していく

  for(int i = 10; i > 0; i--)...ループ変数を10から始め、1まで1つずつ減らしていく

  for(; i < 10; i++)...ループ変数を初期化しない

  for(int i = 0; i < 10;)...繰り返し時の処理を行わない
  

